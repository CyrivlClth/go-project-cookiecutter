// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package internal

import (
	"{{cookiecutter.project_module_name}}/global/database"
	"{{cookiecutter.project_module_name}}/internal/controller"
	"{{cookiecutter.project_module_name}}/internal/router"
	"{{cookiecutter.project_module_name}}/module/mapper"
	"{{cookiecutter.project_module_name}}/module/service"
	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// Injectors from setup.go:

func injectDB(config database.Config) (*gorm.DB, error) {
	db, err := database.New(config)
	if err != nil {
		return nil, err
	}
	return db, nil
}

func injectWeb(db *gorm.DB, arg []string) (*server, error) {
	article := mapper.NewArticle()
	serviceArticle := service.NewArticle(db, article)
	controllerArticle := controller.NewArticle(serviceArticle)
	engine := router.New(controllerArticle)
	internalServer := &server{
		engine: engine,
		addrs:  arg,
	}
	return internalServer, nil
}

// setup.go:

type server struct {
	engine *gin.Engine
	addrs  []string
}

func setup() (*server, error) {
	db, err := injectDB(database.Config{
		Dsn:       ":memory:",
		Debug:     true,
		Singleton: true,
	})
	if err != nil {
		return nil, err
	}

	return injectWeb(db, []string{":8080"})
}
